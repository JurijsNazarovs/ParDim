#!/bin/bash
## Libraries and etc
shopt -s nullglob #allows create an empty array
homePath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" #folder from where this script is runnig
# Important to remember that once script is executed from condor, the homePath is different.
# But since I send funcList with the condor job which executes current script, 
# funclist is still in the same folder.

#Parameters

argsFile=${1:-"argsFile"} #read in parameter file location and file name
dataDir=${2:-"./"}
dagFile=${3:-"./alignment.dag"}  #dag file with all jobs generated by this script. Full path
scriptsPath=${4:-"$homePath"}	#path to all scripts which are using in this shell
 
jobsDir=${dagFile%/} #Remove the ending backslash
jobsDir=${jobsDir%/*} #current path

testRAM=12 #just for testing

#Function - get the corresponding value of parameter file - first column is the parameter name, the rest columns are the parameter value
getValue(){
    
    local argsFile=$1
    local selectName=$2
    local i=0
    local selectVal=""
    while read firstCol restCol
    do 
	varName[$i]="$firstCol"
	varValue[$i]="$restCol"
	((i++))
    done < $argsFile

    for i in ${!varName[@]}
    do
	if [ "${varName[$i]}" == $selectName ]
	then
	    selectVal=${varValue[$i]}
	    printf "$selectVal"
	    return 0
	fi
    done
}

#Function
joinToStr(){
    # Join all element of an array in one string
    # $1 is the splitting character
    # >$1 everything to combine
    spC=$1
    shift
    
    args="$1"
    shift
    
    for i in "$@"
    do
	args="$args$spC$i"
    done
    echo "$args"	
}


#Functions - create the dag file for each folder
createDAG(){
    local jobsDir=$1
    local dagFile=$2
    local argsFile=$3
    local dataDir=$4
    local chipName=$5
    local ctlName=$6
    local dnaseName=$7
    local scriptsPath=$8
    if [ ! -d $jobsDir/out ]
    then
	mkdir -p $jobsDir/out
    fi
    if [ ! -d $jobsDir/err ]
    then
	mkdir -p $jobsDir/err
    fi
    if [ ! -d $jobsDir/log ]
    then
	mkdir -p $jobsDir/log
    fi
    
    # Get directory name
    expName=${dataDir%/} #delete last backSlash
    expName=${expName##*/} #delete all before last backSlash

    #Obtain parameter values from argsFile
    local paraList=("bwaIndexLink" "bwaSoftwareLink" "tBWA" "rLink" "csemLink" "perlLink" "chromRefLink")
    for i in ${!paraList[@]}
    do
	eval ${paraList[$i]}="$(getValue "$argsFile" "${paraList[$i]}")"
    done

    #files/links that need to be transfered
    bwaTrans=("$argsFile" "$bwaIndexLink" "$bwaSoftwareLink")
    permseqTrans=("$argsFile" "$rLink" "$csemLink" "$perlLink" "$chromRefLink" "${scriptsPath}/permseqExec.R")



    ## DNase-seq BWA alignment
    stepName="bwaAlignExec"
    bwaArgs=("$argsFile" "${dataDir}/DNase" "$expName" "$dnaseName")
    #calculate the disk and memory for dnase
    if [ -e "${dataDir}/DNase/${dnaseName}.fastq" ]
    then
	disk=$(du -c "${dataDir}/DNase/${dnaseName}.fastq" | tail -1 | cut -f 1) #size in kilobytes
	#dnaseMemory=$((disk/1024/1024+6)) #memory
	dnaseMemory=$testRAM #memory
	disk=$((disk*20)) #increase this size in 10 times * 2 times for removing bad CIGAR
    elif [ -e "${dataDir}/DNase/${dnaseName}.fastq.gz" ]
    then
		    
	disk=$(du -c "${dataDir}/DNase/${dnaseName}.fastq.gz" | tail -1 | cut -f 1) #size in kilobytes
	#dnaseMemory=$((disk/1024/1024+10)) #memory
	dnaseMemory=$testRAM
	disk=$((disk*3*10*2)) #increase this size in 10 times and 3 times for unzip * 2 times for removing bad CIGAR
    fi
    dnaseDisk=$((disk/1024/1024 + 6)) #in GB rounded to bigger integer +6gb for installation files
    printf "JOB ${stepName}_${expName}_dnase ${jobsDir}/alignment.condor
VARS ${stepName}_${expName}_dnase argumentsList=\"${bwaArgs[@]}\"
VARS ${stepName}_${expName}_dnase transferFileList=\"$(joinToStr "," "${bwaTrans[@]}")\"
VARS ${stepName}_${expName}_dnase jobsDir=\"$jobsDir\"
VARS ${stepName}_${expName}_dnase stepName=\"$stepName\"
VARS ${stepName}_${expName}_dnase cpu=\"$tBWA\"
VARS ${stepName}_${expName}_dnase memory=\"${dnaseMemory}GB\"
VARS ${stepName}_${expName}_dnase disk=\"${dnaseDisk}GB\" 
VARS ${stepName}_${expName}_dnase scriptsPath=\"$scriptsPath\"
\n" >> $dagFile
	



    i=0
    for dataName in ${chipName[@]}
    do
	((i++))
	#step 1 BWA alignment
        stepName="bwaAlignExec"
        #chip
	bwaArgs=("$argsFile" "$dataDir" "$expName" "$dataName")

	        # Calculate right ammount of memory, based on input files
	if [ -e "${dataDir}/${dataName}.fastq" ]
	then
	    disk=$(du -c "${dataDir}/${dataName}.fastq" | tail -1 | cut -f 1) #size in kilobytes
	    #chipMemory=$((disk/1024/1024+6)) #memory
	   chipMemory=$testRAM
	    disk=$((disk*20)) #increase this size in 10 times * 2 times for removing bad CIGAR
	elif [ -e "${dataDir}/${dataName}.fastq.gz" ]
	then
	    
	    disk=$(du -c "${dataDir}/${dataName}.fastq.gz" | tail -1 | cut -f 1) #size in kilobytes
	    #chipMemory=$((disk/1024/1024+10)) #memory
	    chipMemory=$testRAM
	    disk=$((disk*3*20)) #increase this size in 10 times and 3 times for unzip * 2 times for removing bad CIGAR
	else
	    echo \"No \${dataName}.fastq or \${dataName}.fastq.gz exists! Check the input file format!\"
   	    exit 1
	    
	fi
	
	chipDisk=$((disk/1024/1024 + 6)) #in GB rounded to bigger integer +6gb for installation files

	printf "JOB ${stepName}_${dataName}_chip ${jobsDir}/alignment.condor
VARS ${stepName}_${dataName}_chip argumentsList=\"${bwaArgs[@]}\"
VARS ${stepName}_${dataName}_chip transferFileList=\"$(joinToStr "," "${bwaTrans[@]}")\"
VARS ${stepName}_${dataName}_chip jobsDir=\"$jobsDir\"
VARS ${stepName}_${dataName}_chip stepName=\"$stepName\"
VARS ${stepName}_${dataName}_chip cpu=\"$tBWA\"
VARS ${stepName}_${dataName}_chip memory=\"${chipMemory}GB\"
VARS ${stepName}_${dataName}_chip disk=\"${chipDisk}GB\" 
VARS ${stepName}_${dataName}_chip scriptsPath=\"$scriptsPath\"
\n" >> $dagFile
	
	#step2 Permseq step
	stepName="permseqExec"
	permseqArgs=("$argsFile" "${dataName}.sam" "${dnaseName}.sam" "$expName" "rep$i")

	permMemory=$((chipMemory*2))
	permDisk=$((chipDisk/2+2))
	printf "JOB ${stepName}_${dataName}_chip_dnase ${jobsDir}/alignment.condor
VARS ${stepName}_${dataName}_chip_dnase argumentsList=\"${permseqArgs[@]}\"
VARS ${stepName}_${dataName}_chip_dnase transferFileList=\"$(joinToStr ","  "${permseqTrans[@]}")\"
VARS ${stepName}_${dataName}_chip_dnase jobsDir=\"$jobsDir\"
VARS ${stepName}_${dataName}_chip_dnase stepName=\"$stepName\"
VARS ${stepName}_${dataName}_chip_dnase cpu=\"$tBWA\"
VARS ${stepName}_${dataName}_chip_dnase memory=\"${permMemory}GB\"
VARS ${stepName}_${dataName}_chip_dnase disk=\"${permDisk}GB\" 
VARS ${stepName}_${dataName}_chip_dnase scriptsPath=\"$scriptsPath\"
\n" >> $dagFile
		
	printf "PARENT bwaAlignExec_${dataName}_chip bwaAlignExec_${expName}_dnase CHILD permseqExec_${dataName}_chip_dnase 
\n" >> $dagFile
	
	## control
	# Step 1 BWA alignment
	stepName="bwaAlignExec"
        
	case "${ctlName[@]}" in 
	    *"${dataName}.ctl"*)
		
		bwaArgs=("$argsFile" "$dataDir" "$expName" "${dataName}.ctl")
    		#calculate the disk and memory for control
		if [ -e "${dataDir}/${dataName}.ctl.fastq" ]
		then
		    disk=$(du -c "${dataDir}/${dataName}.ctl.fastq" | tail -1 | cut -f 1) #size in kilobytes
		    #ctlMemory=$((disk/1024/1024+6)) #memory
		    ctlMemory=$testRAM
		    disk=$((disk*20)) #increase this size in 10 times * 2 times for removing bad CIGAR
		elif [ -e "${dataDir}/${dataName}.ctl.fastq.gz" ]
		then
		    
		    disk=$(du -c "${dataDir}/${dataName}.ctl.fastq.gz" | tail -1 | cut -f 1) #size in kilobytes
		    #ctlMemory=$((disk/1024/1024+10)) #memory
		    ctlMemory=$testRAM
		    disk=$((disk*3*20)) #increase this size in 10 times and 3 times for unzip * 2 times for removing the bad CIGAR
		fi
		ctlDisk=$((disk/1024/1024 + 6)) #in GB rounded to bigger integer +6gb for installation files
		
		printf "JOB ${stepName}_${dataName}_ctl ${jobsDir}/alignment.condor
VARS ${stepName}_${dataName}_ctl argumentsList=\"${bwaArgs[@]}\"
VARS ${stepName}_${dataName}_ctl transferFileList=\"$(joinToStr "," "${bwaTrans[@]}")\"
VARS ${stepName}_${dataName}_ctl jobsDir=\"$jobsDir\"
VARS ${stepName}_${dataName}_ctl stepName=\"$stepName\"
VARS ${stepName}_${dataName}_ctl cpu=\"$tBWA\"
VARS ${stepName}_${dataName}_ctl memory=\"${ctlMemory}GB\"
VARS ${stepName}_${dataName}_ctl disk=\"${ctlDisk}GB\" 
VARS ${stepName}_${dataName}_ctl scriptsPath=\"$scriptsPath\"
\n" >> $dagFile
		    
                # Step 2 Permseq step
		stepName="permseqExec"
		permseqArgs=("$argsFile" "${dataName}.ctl.sam" "${dnaseName}.sam" "$expName" "ctl$i")
		permMemory=$((ctlMemory*2))
		permDisk=$((ctlDisk/2 + 2))
		
		printf "JOB ${stepName}_${dataName}_ctl_dnase ${jobsDir}/alignment.condor
VARS ${stepName}_${dataName}_ctl_dnase argumentsList=\"${permseqArgs[@]}\" 
VARS ${stepName}_${dataName}_ctl_dnase transferFileList=\"$(joinToStr "," "${permseqTrans[@]}")\"
VARS ${stepName}_${dataName}_ctl_dnase jobsDir=\"$jobsDir\"
VARS ${stepName}_${dataName}_ctl_dnase stepName=\"${stepName}\"
VARS ${stepName}_${dataName}_ctl_dnase cpu=\"$tBWA\"
VARS ${stepName}_${dataName}_ctl_dnase memory=\"${permMemory}GB\"
VARS ${stepName}_${dataName}_ctl_dnase disk=\"${permDisk}GB\"
VARS ${stepName}_${dataName}_ctl_dnase scriptsPath=\"$scriptsPath\"
\n" >> $dagFile

		printf "PARENT bwaAlignExec_${dataName}_ctl bwaAlignExec_${expName}_dnase CHILD permseqExec_${dataName}_ctl_dnase 
\n" >> $dagFile
		;;
	    *)
		echo "No matched controlled ChIP-seq dataset found!"
		exit 1
		;;
	esac
	
    done
}

#Create alignment.condor
createCondor(){
    local condorFile=$1
    local repFl=$2 #repeat? 1-yes, 0 - not
    printf "universe = vanilla

getenv = true
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
" >> $condorFile

if [ "$repFl" -ne "0" ]; then
    printf "
on_exit_remove = ( (ExitBySignal == False) && (ExitCode == 0) ) || (NumJobStarts > 10)
on_exit_hold = (NumJobStarts > 10)
periodic_release = (JobStatus == 5) && (NumJobStarts <= 50)

" >> $condorFile
fi



printf "
log = \$(jobsDir)/log/\$(stepName)_\$(Cluster).log
error = \$(jobsDir)/err/\$(stepName)_\$(Cluster)_\$(Process).err
output = \$(jobsDir)/out/\$(stepName)_\$(Cluster)_\$(Process).out

executable = \$(scriptsPath)/\$(stepName).sh
arguments = \$(argumentsList)
requirements = (Target.HasGluster == true)
transfer_input_files = \$(transferFileList)


request_cpus = \$(cpu)
request_memory = \$(memory)
request_disk = \$(disk)

queue
" >> $condorFile
}


## Create main DAG file, which contains all DAG jobs for every "right" folder
inpForm="fastq"

#ctl
ctlName=($dataDir/*ctl.$inpForm*)
ctlName=(${ctlName[@]##*/}) #delete all before last backSlash
ctlName=(${ctlName[@]%.$inpForm*})
#ctlName=($(printf "%s\n" "${ctlName[@]}" | sort -u))
ctlNum=${#ctlName[@]}
	
#DNase
dnaseName=($dataDir/DNase/*.$inpForm*)
dnaseName=(${dnaseName[@]##*/}) #delete all before last backSlash
dnaseName=(${dnaseName[@]%.$inpForm*})
#dnaseName=($(printf "%s\n" "${dnaseName[@]}" | sort -u))
dnaseNum=${#dnaseName[@]}

#ChIP-seq
chipName=($dataDir/*.$inpForm*) #array of file names with specific format
chipName=(${chipName[@]##*/}) #delete all before last backSlash
chipName=(${chipName[@]//*ctl*}) #remove file whose name contains ctl
#chipName=(${chipName[@]//*dnase*}) #remove file whose name contains dnase
chipName=(${chipName[@]%.$inpForm*}) #remove .fastq and .fastq.gz
#chipName=($(printf "%s\n" "${chipName[@]}" | sort -u))
chipNum=${#chipName[@]}

#Check if there is any ChIP-seq data
if [ "$chipNum" -eq "0" ]
then 
    echo "In directory, ${dataDir}, wrong input! Number of ChIP-seq fastq equals to 0."
    exit 1
fi

# Check that #ctl corresponds to #chip
if [ "$ctlNum" -ne "$chipNum" ]
then
    echo "In directory,  ${dataDir}, ChIP-seq control file number is inconsistant with the ChIP-seq file number!"
    exit 1
fi

# Pending function to accept non dnase prior
if [ "$dnaseNum" -eq 0 ]
then
    echo "There is no DNase-seq file!"
    exit 1
fi

if [ "$dnaseNum" -gt 1 ]
then
    echo "There are more than one DNase-seq file! They need to be merged!"
    exit 1
fi

# Create DAG, submit, executable file
if [ "$chipNum" -gt "0" ]; then #read only if have some "right" files

    curJobDir="${jobsDir}" #directory for the curent job
    if [ ! -d ${curJobDir} ]; then
	mkdir -p "${curJobDir}"
    fi
    
    scp "${argsFile}" "${curJobDir}/"
    curJobFile=$dagFile #DAG file
    createDAG "${curJobDir}" "${curJobFile}" "${argsFile}" "${dataDir}/" "$(echo ${chipName[@]})" "$(echo ${ctlName[@]})" "$(echo ${dnaseName[@]})" "$scriptsPath"
    curJobFile="${curJobDir}/alignment.condor" #condor file
    createCondor "${curJobFile}" "1"
    

fi


exit 0




